package com.example.genetics.Activitys  // ‚Üê L√çNEA A√ëADIDA

import android.content.Intent
import android.os.Bundle
import android.view.View
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.genetics.Create.AddUserActivity
import com.example.genetics.Edit.EditUserActivity
import com.example.genetics.R
import com.example.genetics.api.Adapters.UsersAdapter
import com.example.genetics.api.RetrofitClient
import com.example.genetics.api.UpdateUserRequest
import com.example.genetics.api.Usuario
import kotlinx.coroutines.launch

class UsersActivity : AppCompatActivity() {

    private lateinit var toolbar: androidx.appcompat.widget.Toolbar
    private lateinit var swipeRefreshLayout: androidx.swiperefreshlayout.widget.SwipeRefreshLayout
    private lateinit var recyclerViewUsers: androidx.recyclerview.widget.RecyclerView
    private lateinit var textEmptyState: android.widget.LinearLayout
    private lateinit var fabAddUser: com.google.android.material.floatingactionbutton.FloatingActionButton

    private val apiService = RetrofitClient.getApiService()
    private lateinit var usersAdapter: UsersAdapter
    private val usuariosList = mutableListOf<Usuario>()

    companion object {
        private const val REQUEST_ADD_USER = 4001
        private const val REQUEST_EDIT_USER = 4002
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_users)

        initializeViews()
        setupUI()
        loadUsers()
    }

    // ... resto del c√≥digo permanece igual
    private fun initializeViews() {
        toolbar = findViewById(R.id.toolbar)
        swipeRefreshLayout = findViewById(R.id.swipeRefreshLayout)
        recyclerViewUsers = findViewById(R.id.recyclerViewUsers)
        textEmptyState = findViewById(R.id.textEmptyState)
        fabAddUser = findViewById(R.id.fabAddUser)
    }

    private fun setupUI() {
        setSupportActionBar(toolbar)
        supportActionBar?.setDisplayHomeAsUpEnabled(true)
        supportActionBar?.title = "üë• Usuarios"

        // Configurar RecyclerView con callbacks de CRUD
        usersAdapter = UsersAdapter(
            usuariosList,
            onItemClick = { usuario -> mostrarDetallesUsuario(usuario) },
            onEditClick = { usuario -> editarUsuario(usuario) },
            onDeleteClick = { usuario -> confirmarEliminarUsuario(usuario) },
            onToggleActiveClick = { usuario -> toggleUsuarioActivo(usuario) }
        )

        recyclerViewUsers.apply {
            layoutManager = LinearLayoutManager(this@UsersActivity)
            adapter = usersAdapter
        }

        // Configurar FAB
        fabAddUser.setOnClickListener {
            val intent = Intent(this, AddUserActivity::class.java)
            startActivityForResult(intent, REQUEST_ADD_USER)
        }

        // Configurar refresh
        swipeRefreshLayout.setOnRefreshListener {
            loadUsers()
        }
    }

    // ... resto de m√©todos permanecen iguales

    private fun mostrarDetallesUsuario(usuario: Usuario) {
        val mensaje = buildString {
            append("üë§ Nombre: ${usuario.nombre} ${usuario.apellidos}\n")
            append("üìß Email: ${usuario.email}\n")
            append("üè∑Ô∏è Rol: ${formatearRol(usuario.rol)}\n")
            append("üìÖ Miembro desde: ${formatearFecha(usuario.fechaCreacion)}\n")
            append("üïê √öltimo acceso: ${formatearFechaUltimoAcceso(usuario.ultimoAcceso)}\n")
            append("üìä Estado: ${if (usuario.activo == true) "‚úÖ Activo" else "‚ùå Inactivo"}")
            if (usuario.isStaff == true) {
                append("\nüëë Usuario administrador")
            }
        }

        androidx.appcompat.app.AlertDialog.Builder(this)
            .setTitle("Detalles del Usuario")
            .setMessage(mensaje)
            .setPositiveButton("OK", null)
            .setNeutralButton("‚úèÔ∏è Editar") { _, _ ->
                editarUsuario(usuario)
            }
            .setNegativeButton("üîÑ ${if (usuario.activo == true) "Desactivar" else "Activar"}") { _, _ ->
                toggleUsuarioActivo(usuario)
            }
            .show()
    }

    private fun editarUsuario(usuario: Usuario) {
        val intent = Intent(this, EditUserActivity::class.java)
        intent.putExtra("USER_ID", usuario.id)
        startActivityForResult(intent, REQUEST_EDIT_USER)
    }

    private fun confirmarEliminarUsuario(usuario: Usuario) {
        // Verificaciones de seguridad antes de mostrar el di√°logo
        val mensaje = when {
            usuario.rol == "admin" -> {
                "‚ö†Ô∏è No se puede eliminar un usuario administrador por seguridad."
            }
            usuario.isStaff == true -> {
                "‚ö†Ô∏è No se puede eliminar un usuario con permisos de staff."
            }
            else -> {
                "¬øEst√°s seguro de que quieres eliminar al usuario '${usuario.nombre} ${usuario.apellidos}'?\n\n" +
                        "‚ö†Ô∏è Esta acci√≥n:\n" +
                        "‚Ä¢ Eliminar√° permanentemente la cuenta del usuario\n" +
                        "‚Ä¢ Puede afectar datos asociados (animales, incidencias, etc.)\n" +
                        "‚Ä¢ NO se puede deshacer\n\n" +
                        "¬øContinuar con la eliminaci√≥n?"
            }
        }

        if (usuario.rol == "admin" || usuario.isStaff == true) {
            // Solo mostrar mensaje de advertencia
            androidx.appcompat.app.AlertDialog.Builder(this)
                .setTitle("‚ùå Eliminaci√≥n no permitida")
                .setMessage(mensaje)
                .setPositiveButton("Entendido", null)
                .show()
        } else {
            // Mostrar di√°logo de confirmaci√≥n
            androidx.appcompat.app.AlertDialog.Builder(this)
                .setTitle("‚ö†Ô∏è Eliminar Usuario")
                .setMessage(mensaje)
                .setPositiveButton("S√≠, eliminar") { _, _ ->
                    eliminarUsuario(usuario)
                }
                .setNegativeButton("Cancelar", null)
                .setIcon(android.R.drawable.ic_dialog_alert)
                .show()
        }
    }

    private fun eliminarUsuario(usuario: Usuario) {
        // Mostrar indicador de carga
        val loadingDialog = androidx.appcompat.app.AlertDialog.Builder(this)
            .setTitle("Eliminando usuario...")
            .setMessage("Por favor espera...")
            .setCancelable(false)
            .create()
        loadingDialog.show()

        lifecycleScope.launch {
            try {
                android.util.Log.d("USERS_ACTIVITY", "üóëÔ∏è Iniciando eliminaci√≥n del usuario ID: ${usuario.id}")

                val response = apiService.deleteUser(usuario.id!!)

                loadingDialog.dismiss()

                if (response.isSuccessful) {
                    android.util.Log.d("USERS_ACTIVITY", "‚úÖ Usuario eliminado exitosamente")

                    // Mostrar mensaje de √©xito
                    Toast.makeText(
                        this@UsersActivity,
                        "‚úÖ Usuario '${usuario.nombre} ${usuario.apellidos}' eliminado correctamente",
                        Toast.LENGTH_SHORT
                    ).show()

                    // Eliminar del adapter inmediatamente para mejor UX
                    usersAdapter.removeUser(usuario)

                    // Actualizar estado vac√≠o si es necesario
                    updateEmptyState(usuariosList.isEmpty())

                } else {
                    val errorBody = response.errorBody()?.string()
                    android.util.Log.e("USERS_ACTIVITY", "‚ùå Error del servidor: $errorBody")

                    // Manejar errores espec√≠ficos
                    val errorMessage = when (response.code()) {
                        403 -> "‚ùå No tienes permisos para eliminar este usuario"
                        404 -> "‚ùå Usuario no encontrado (puede haber sido eliminado por otro administrador)"
                        409 -> "‚ùå No se puede eliminar: el usuario tiene datos asociados que deben eliminarse primero"
                        500 -> "‚ùå Error interno del servidor. Int√©ntalo m√°s tarde"
                        else -> "‚ùå Error al eliminar usuario (c√≥digo: ${response.code()})"
                    }

                    mostrarErrorEliminacion(errorMessage, errorBody)
                }

            } catch (e: java.net.ConnectException) {
                loadingDialog.dismiss()
                android.util.Log.e("USERS_ACTIVITY", "‚ùå Error de conexi√≥n: ${e.message}")
                mostrarErrorEliminacion("‚ùå No se puede conectar al servidor. Verifica tu conexi√≥n a internet.", null)

            } catch (e: java.net.SocketTimeoutException) {
                loadingDialog.dismiss()
                android.util.Log.e("USERS_ACTIVITY", "‚ùå Timeout: ${e.message}")
                mostrarErrorEliminacion("‚ùå La operaci√≥n tard√≥ demasiado. Int√©ntalo de nuevo.", null)

            } catch (e: Exception) {
                loadingDialog.dismiss()
                android.util.Log.e("USERS_ACTIVITY", "‚ùå Exception inesperada: ${e.message}", e)
                mostrarErrorEliminacion("‚ùå Error inesperado: ${e.localizedMessage ?: "Error desconocido"}", null)
            }
        }
    }

    private fun mostrarErrorEliminacion(mensaje: String, detallesTecnicos: String?) {
        val mensajeCompleto = if (detallesTecnicos != null) {
            "$mensaje\n\nDetalles t√©cnicos: $detallesTecnicos"
        } else {
            mensaje
        }

        androidx.appcompat.app.AlertDialog.Builder(this)
            .setTitle("Error al eliminar usuario")
            .setMessage(mensajeCompleto)
            .setPositiveButton("OK", null)
            .setIcon(android.R.drawable.ic_dialog_alert)
            .show()
    }

    private fun toggleUsuarioActivo(usuario: Usuario) {
        // Como no tienes el endpoint toggle-active, usaremos una actualizaci√≥n parcial
        val nuevoEstado = !(usuario.activo ?: true)

        androidx.appcompat.app.AlertDialog.Builder(this)
            .setTitle("${if (nuevoEstado) "Activar" else "Desactivar"} Usuario")
            .setMessage("¬øEst√°s seguro de que quieres ${if (nuevoEstado) "activar" else "desactivar"} al usuario '${usuario.nombre} ${usuario.apellidos}'?")
            .setPositiveButton("S√≠") { _, _ ->
                actualizarEstadoUsuario(usuario, nuevoEstado)
            }
            .setNegativeButton("Cancelar", null)
            .show()
    }

    private fun actualizarEstadoUsuario(usuario: Usuario, nuevoEstado: Boolean) {
        lifecycleScope.launch {
            try {
                // Usar updateUser en lugar del m√©todo que no existe
                val updateRequest = UpdateUserRequest(
                    nombre = usuario.nombre,
                    apellidos = usuario.apellidos,
                    email = usuario.email,
                    rol = usuario.rol,
                    activo = nuevoEstado
                )

                val response = apiService.updateUser(usuario.id!!, updateRequest)

                if (response.isSuccessful && response.body() != null) {
                    val mensaje = if (nuevoEstado) {
                        "Usuario activado correctamente"
                    } else {
                        "Usuario desactivado correctamente"
                    }

                    Toast.makeText(this@UsersActivity, mensaje, Toast.LENGTH_SHORT).show()

                    // Recargar la lista para mostrar el cambio
                    loadUsers()
                } else {
                    val errorBody = response.errorBody()?.string()
                    android.util.Log.e("USERS_ACTIVITY", "‚ùå Error actualizando estado: $errorBody")
                    Toast.makeText(this@UsersActivity, "Error al cambiar estado del usuario", Toast.LENGTH_SHORT).show()
                }
            } catch (e: Exception) {
                android.util.Log.e("USERS_ACTIVITY", "‚ùå Exception actualizando estado: ${e.message}", e)
                Toast.makeText(this@UsersActivity, "Error: ${e.message}", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun formatearRol(rol: String?): String {
        return when (rol) {
            "admin" -> "üëë Administrador"
            "usuario" -> "üë§ Usuario"
            "due√±o" -> "üè† Due√±o"
            else -> "‚ùì Sin definir"
        }
    }

    private fun formatearFecha(fecha: String?): String {
        return try {
            if (fecha != null) {
                val inputFormat = java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", java.util.Locale.getDefault())
                val outputFormat = java.text.SimpleDateFormat("dd/MM/yyyy", java.util.Locale.getDefault())
                val date = inputFormat.parse(fecha)
                outputFormat.format(date ?: java.util.Date())
            } else {
                "No disponible"
            }
        } catch (e: Exception) {
            fecha ?: "No disponible"
        }
    }

    private fun formatearFechaUltimoAcceso(fecha: String?): String {
        return try {
            if (fecha != null) {
                val inputFormat = java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", java.util.Locale.getDefault())
                val outputFormat = java.text.SimpleDateFormat("dd/MM/yyyy HH:mm", java.util.Locale.getDefault())
                val date = inputFormat.parse(fecha)
                outputFormat.format(date ?: java.util.Date())
            } else {
                "Nunca"
            }
        } catch (e: Exception) {
            fecha ?: "Nunca"
        }
    }

    private fun loadUsers() {
        android.util.Log.d("USERS_ACTIVITY", "üîÑ Iniciando carga de usuarios...")
        swipeRefreshLayout.isRefreshing = true

        lifecycleScope.launch {
            try {
                val response = apiService.getUsers()
                android.util.Log.d("USERS_ACTIVITY", "üì° Response code: ${response.code()}")

                if (response.isSuccessful && response.body() != null) {
                    val users = response.body()!!
                    android.util.Log.d("USERS_ACTIVITY", "‚úÖ Usuarios recibidos: ${users.size}")

                    // Limpiar y actualizar la lista
                    usuariosList.clear()
                    usuariosList.addAll(users.sortedBy { it.nombre })

                    // Notificar al adapter
                    usersAdapter.notifyDataSetChanged()

                    android.util.Log.d("USERS_ACTIVITY", "üìã Lista actualizada. Items en adapter: ${usersAdapter.itemCount}")

                    // Actualizar UI vac√≠a
                    updateEmptyState(users.isEmpty())

                } else {
                    val errorBody = response.errorBody()?.string()
                    android.util.Log.e("USERS_ACTIVITY", "‚ùå Error: $errorBody")
                    Toast.makeText(this@UsersActivity, "Error cargando usuarios: ${response.code()}", Toast.LENGTH_SHORT).show()
                    updateEmptyState(true)
                }

            } catch (e: Exception) {
                android.util.Log.e("USERS_ACTIVITY", "‚ùå Exception: ${e.message}", e)
                Toast.makeText(this@UsersActivity, "Error de conexi√≥n: ${e.message}", Toast.LENGTH_LONG).show()
                updateEmptyState(true)
            } finally {
                swipeRefreshLayout.isRefreshing = false
            }
        }
    }

    private fun updateEmptyState(isEmpty: Boolean) {
        if (isEmpty) {
            textEmptyState.visibility = View.VISIBLE
            recyclerViewUsers.visibility = View.GONE
            android.util.Log.d("USERS_ACTIVITY", "üëª Mostrando estado vac√≠o")
        } else {
            textEmptyState.visibility = View.GONE
            recyclerViewUsers.visibility = View.VISIBLE
            android.util.Log.d("USERS_ACTIVITY", "üìã Mostrando lista de usuarios")
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        when (requestCode) {
            REQUEST_ADD_USER, REQUEST_EDIT_USER -> {
                if (resultCode == RESULT_OK) {
                    android.util.Log.d("USERS_ACTIVITY", "üîÑ Recargando despu√©s de crear/editar usuario")
                    loadUsers()
                }
            }
        }
    }

    override fun onResume() {
        super.onResume()
        loadUsers()
    }

    override fun onSupportNavigateUp(): Boolean {
        onBackPressedDispatcher.onBackPressed()
        return true
    }
}